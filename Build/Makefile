# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../GTest/googletest


# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = cppusage.exe
TESTS += stdcxxusage.exe


# C++ building chain
CXX_VER = 8
ifeq (${CXX_VER}, 4)
    CXX = g++
else ifeq (${CXX_VER}, 7)
    CXX = brown-g++-7.3.0
else ifeq (${CXX_VER}, 8)
    CXX = brown-g++-8.2.0
endif


# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
# '-isystem' for '#include <*>'
CPPFLAGS += -isystem ${GTEST_DIR}/include


# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -std=c++17


# Flags passed to the linker.
# /etc/ld.so.conf.d/brown-cpp-studio.conf
#LDFLAGS = 
ifeq (${CXX_VER}, 4)
    #LDFLAGS += -L/usr/lib64 -lstdc++
else ifeq (${CXX_VER}, 7)
    #LDFLAGS += -L/usr/local/gcc-7.3.0/lib64 -lstdc++
else ifeq (${CXX_VER}, 8)
    #LDFLAGS += -L/usr/local/gcc-8.2.0/lib64 -lstdc++
endif


# House-keeping build targets.
all : ${TESTS}

clean :
	rm -f ${TESTS} gtest.a gtest_main.a *.o


# Builds gtest.a and gtest_main.a.
## All Google Test headers.  Usually you shouldn't change this
## definition.
GTEST_HEADERS = ${GTEST_DIR}/include/gtest/*.h \
                ${GTEST_DIR}/include/gtest/internal/*.h

## Usually you shouldn't tweak such internal variables, indicated by a
## trailing _.
GTEST_SRCS_ = ${GTEST_DIR}/src/*.cc ${GTEST_DIR}/src/*.h ${GTEST_HEADERS}

## For simplicity and to avoid depending on Google Test's
## implementation details, the dependencies specified below are
## conservative and not optimized.  This is fine as Google Test
## compiles fast and for ordinary users its source rarely changes.
gtest-all.o : ${GTEST_SRCS_}
	${CXX} ${CPPFLAGS} -I${GTEST_DIR} ${CXXFLAGS} ${LDFLAGS} \
    -c ${GTEST_DIR}/src/gtest-all.cc

gtest_main.o : ${GTEST_SRCS_}
	${CXX} ${CPPFLAGS} -I${GTEST_DIR} ${CXXFLAGS} ${LDFLAGS} \
    -c ${GTEST_DIR}/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^


# Individual testing programs and their source files.
##cppusage
CPP_USAGE_DIR = ../CppUsage
CPP_USAGE_SRCS = ${CPP_USAGE_DIR}/*.cxx
#CPP_USAGE_SRCS += ${CPP_USAGE_DIR}/*.cpp
#CPP_USAGE_SRCS += ${CPP_USAGE_DIR}/*.cc
#CPP_USAGE_HEADERS = ${CPP_USAGE_DIR}/*.h
#CPP_USAGE_HEADERS += ${CPP_USAGE_DIR}/*.hpp

cppusage.exe : ${CPP_USAGE_SRCS} ${CPP_USAGE_HEADERS} gtest_main.a
	${CXX} ${CPPFLAGS} ${CXXFLAGS} ${LDFLAGS} -lpthread $^ -o $@

##stdcxxusage
STDCXX_USAGE_DIR = ../StdCxxUsage
STDCXX_USAGE_SRCS = ${STDCXX_USAGE_DIR}/*.cxx
STDCXX_USAGE_HEADERS = ${STDCXX_USAGE_DIR}/*.h

stdcxxusage.exe : ${STDCXX_USAGE_SRCS} ${STDCXX_USAGE_HEADERS} gtest_main.a
	${CXX} ${CPPFLAGS} ${CXXFLAGS} ${LDFLAGS} -lpthread $^ -o $@

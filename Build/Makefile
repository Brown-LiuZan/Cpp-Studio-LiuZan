# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Common directories
ROOT_DIR := $(abspath ..)
COMMON_DIR := ${ROOT_DIR}/Common
GTEST_DIR := ${ROOT_DIR}/GTest/googletest
GMOCK_DIR := ${ROOT_DIR}/GTest/googlemock


# Global make variables
INFO_ENABLED := 0
WARNING_ENABLED := 1
ERROR_ENABLED := 1

# C++ building tool chain
BUILD_TOOL_CHAIN_VER := 8
ifeq (${BUILD_TOOL_CHAIN_VER}, 4)
    BUILD_CHAIN_DIR := /usr/local/gcc-4.9.4/bin
    LIB_DIR := /usr/local/gcc-4.9.4/lib64
    CXX := ${BUILD_CHAIN_DIR}/brown-g++-4.9.4
    AR := ${BUILD_CHAIN_DIR}/brown-gcc-ar-4.9.4
    NM := ${BUILD_CHAIN_DIR}/brown-gcc-nm-4.9.4
else ifeq (${BUILD_TOOL_CHAIN_VER}, 5)
    BUILD_CHAIN_DIR := /usr/local/gcc-5.5.0/bin
    LIB_DIR := /usr/local/gcc-5.5.0/lib64
    CXX := ${BUILD_CHAIN_DIR}/brown-g++-5.5.0
    AR := ${BUILD_CHAIN_DIR}/brown-gcc-ar-5.5.0
    NM := ${BUILD_CHAIN_DIR}/brown-gcc-nm-5.5.0
else ifeq (${BUILD_TOOL_CHAIN_VER}, 6)
    BUILD_CHAIN_DIR := /usr/local/gcc-6.5.0/bin
    LIB_DIR := /usr/local/gcc-6.5.0/lib64
    CXX := ${BUILD_CHAIN_DIR}/brown-g++-6.5.0
    AR := ${BUILD_CHAIN_DIR}/brown-gcc-ar-6.5.0
    NM := ${BUILD_CHAIN_DIR}/brown-gcc-nm-6.5.0
else ifeq (${BUILD_TOOL_CHAIN_VER}, 7)
    BUILD_CHAIN_DIR := /usr/local/gcc-7.4.0/bin
    LIB_DIR := /usr/local/gcc-7.4.0/lib64
    CXX := ${BUILD_CHAIN_DIR}/brown-g++-7.4.0
    AR := ${BUILD_CHAIN_DIR}/brown-gcc-ar-7.4.0
    NM := ${BUILD_CHAIN_DIR}/brown-gcc-nm-7.4.0
else ifeq (${BUILD_TOOL_CHAIN_VER}, 8)
    BUILD_CHAIN_DIR := /usr/local/gcc-8.2.0/bin
    LIB_DIR := /usr/local/gcc-8.2.0/lib64
    CXX := ${BUILD_CHAIN_DIR}/brown-g++-8.2.0
    AR := ${BUILD_CHAIN_DIR}/brown-gcc-ar-8.2.0
    NM := ${BUILD_CHAIN_DIR}/brown-gcc-nm-8.2.0
endif # BUILD_TOOL_CHAIN_VER
ifeq (${INFO_ENABLED}, 1)
$(info "Building tool chain directory: ${BUILD_CHAIN_DIR}")
$(info "Library directory of given building tool chain: ${LIB_DIR}")
$(info "g++: ${CXX}")
$(info "ar: ${AR}")
$(info "nm: ${NM}")
endif


# Flags passed to the preprocessor.
#   '-isystem' for '#include<*>'
CPPFLAGS :=
#     Set Google Test's header directory as a system directory, such that
#     the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem ${GTEST_DIR}/include
#     Set Google Mock's header directory as a system directory, such that
#     the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem ${GMOCK_DIR}/include
#   '-I${DirOfProjectHeaderFiles}' for '#include""'
CPPFLAGS += -I${ROOT_DIR}
ifeq (${INFO_ENABLED}, 1)
$(info "Flags for C preprocessor: ${CPPFLAGS}")
endif

# Flags passed to the C++ compiler.
CXXFLAGS :=
#   Debugging or optimizing options
CXXFLAGS += -g
#   Warning options
CXXFLAGS += -Wall -Wextra
#   Threading options
CXXFLAGS += -pthread
#   Language options
STD_VER := 11
ifeq (${STD_VER}, 98)
    CXXFLAGS += -std=c++98
else ifeq (${STD_VER}, 11)
    CXXFLAGS += -std=c++11
else ifeq (${STD_VER}, 14)
    CXXFLAGS += -std=c++14
else ifeq (${STD_VER}, 17)
    CXXFLAGS += -std=c++17
else ifeq (${STD_VER}, 20)
    CXXFLAGS += -std=c++20
else
    $(error Invalid C++ version: ${STD_VER})
endif # STD_VER
ifeq (${INFO_ENABLED}, 1)
$(info "Flags for C++ compiler: ${CXXFLAGS}")
endif


# Flags passed to the linker.
LDFLAGS :=
#   Statically linking the standard library under ${LIB_DIR}.
LDFLAGS += -static-libstdc++ ${LIB_DIR}/libstdc++.a
#   Other static libraries under system search paths. 
LDFLAGS += -lpthread
#   Other static libraries under given search paths. 
#     For example, lib${LibraryNameSuffix}.a
#LDFLAGS += -L${StaticLibraryPath} -l${LibraryNameSuffix}
# How about dynamically linking?
ifeq (${INFO_ENABLED}, 1)
$(info "Flags for C++ linker: ${LDFLAGS}")
endif


# All targets could be produced by this Makefile.
TARGETS :=
TARGETS += cxxusage.exe
TARGETS += stdcxxusage.exe
#TARGETS += algorithms.exe
TARGETS += lsp.exe

# Rules of all targets.
all : ${TARGETS}

# Common header files
COMMON_HEADERS :=
COMMON_HEADERS += $(shell ls ${COMMON_DIR}/*.h)
#COMMON_HEADERS += $(shell ls ${COMMON_DIR}/*.hpp)
ifeq (${INFO_ENABLED}, 1)
$(info "Common header files: ${COMMON_HEADERS}")
endif

# Rules of static libraries
#   gtest.a and gtest_main.a.
GTEST_HEADERS := ${GTEST_DIR}/include/gtest/*.h \
                 ${GTEST_DIR}/include/gtest/internal/*.h
GTEST_SRCS_ := ${GTEST_DIR}/src/*.cc ${GTEST_DIR}/src/*.h ${GTEST_HEADERS}
#     For simplicity and to avoid depending on Google Test's
#     implementation details, the dependencies specified below are
#     conservative and not optimized.  This is fine as Google Test
#     compiles fast and for ordinary users its source rarely changes.
gtest-all.o : ${GTEST_SRCS_}
	${CXX} ${CPPFLAGS} -I${GTEST_DIR} ${CXXFLAGS} \
    -c ${GTEST_DIR}/src/gtest-all.cc
gtest_main.o : ${GTEST_SRCS_}
	${CXX} ${CPPFLAGS} -I${GTEST_DIR} ${CXXFLAGS} \
    -c ${GTEST_DIR}/src/gtest_main.cc
gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^
gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^


# Rules of executable binaries.
#   cxxusage.exe
#     Directories of source files
CXX_USAGE_DIR :=
CXX_USAGE_DIR += ${ROOT_DIR}/CxxUsage
#     Source files
CXX_USAGE_SRCS :=
CXX_USAGE_SRCS += $(shell ls ${CXX_USAGE_DIR}/*.cxx)
#CXX_USAGE_SRCS += $(shell ls ${CXX_USAGE_DIR}/*.cpp)
#CXX_USAGE_SRCS += $(shell ls ${CXX_USAGE_DIR}/*.cc)
ifeq (${INFO_ENABLED}, 1)
$(info "Source files of cxxusage.exe: ${CXX_USAGE_SRCS}")
endif
#     Header files
#CXX_USAGE_HEADERS :=
#CXX_USAGE_HEADERS += $(shell ls ${CXX_USAGE_DIR}/*.h)
#CXX_USAGE_HEADERS += $(shell ls ${CXX_USAGE_DIR}/*.hpp)
ifeq (${INFO_ENABLED}, 1)
$(info "Header files of cxxusage.exe: ${CXX_USAGE_HEADERS}")
endif
#     Object files
CXX_USAGE_OBJS :=
CXX_USAGE_OBJS += $(patsubst %.cxx,%.o,${CXX_USAGE_SRCS})
#CXX_USAGE_OBJS += $(patsubst %.cpp,%.o,${CXX_USAGE_SRCS})
#CXX_USAGE_OBJS += $(patsubst %.cc,%.o,${CXX_USAGE_SRCS})
ifeq (${INFO_ENABLED}, 1)
$(info "Object files of cxxusage.exe: ${CXX_USAGE_OBJS}")
endif
#     Rules
#       Pattern rules(Need better rule for .cpp/.cc)
${CXX_USAGE_DIR}/%.o : ${CXX_USAGE_DIR}/%.cxx
	${CXX} -o $@ -c $< ${CPPFLAGS} ${CXXFLAGS}
#       Overall rule
CXX_USAGE_PREREQUISITES :=
CXX_USAGE_PREREQUISITES += gtest_main.a
CXX_USAGE_PREREQUISITES += ${CXX_USAGE_OBJS}
CXX_USAGE_PREREQUISITES += ${COMMON_HEADERS}
cxxusage.exe : ${CXX_USAGE_PREREQUISITES}
	${CXX} -o $@ $^ ${LDFLAGS}

#   stdcxxusage.exe
#     Direcotries of source files
STDCXX_USAGE_DIR :=
STDCXX_USAGE_DIR += ${ROOT_DIR}/StdCxxUsage
#     Source files
STDCXX_USAGE_SRCS :=
STDCXX_USAGE_SRCS += $(shell ls ${STDCXX_USAGE_DIR}/*.cxx)
#STDCXX_USAGE_SRCS += $(shell ls ${STDCXX_USAGE_DIR}/*.cpp)
#STDCXX_USAGE_SRCS += $(shell ls ${STDCXX_USAGE_DIR}/*.cc)
ifeq (${INFO_ENABLED}, 1)
$(info "Source files of stdcxxusage.exe: ${STDCXX_USAGE_SRCS}")
endif
#     Header files
STDCXX_USAGE_HEADERS :=
STDCXX_USAGE_HEADERS += $(shell ls ${STDCXX_USAGE_DIR}/*.h)
#STDCXX_USAGE_HEADERS += $(shell ls ${STDCXX_USAGE_DIR}/*.hpp)
ifeq (${INFO_ENABLED}, 1)
$(info "Header files of stdcxxusage.exe: ${STDCXX_USAGE_HEADERS}")
endif
#     Object files
STDCXX_USAGE_OBJS :=
STDCXX_USAGE_OBJS += $(patsubst %.cxx,%.o,${STDCXX_USAGE_SRCS})
#STDCXX_USAGE_OBJS += $(patsubst %.cpp,%.o,${STDCXX_USAGE_SRCS})
#STDCXX_USAGE_OBJS += $(patsubst %.cc,%.o,${STDCXX_USAGE_SRCS})
ifeq (${INFO_ENABLED}, 1)
$(info "Object files of stdcxxusage.exe: ${STDCXX_USAGE_OBJS}")
endif
#     Rules
#       Pattern rules(Need better rule for .cpp/.cc)
${STDCXX_USAGE_DIR}/%.o : ${STDCXX_USAGE_DIR}/%.cxx
	${CXX} -o $@ -c $< ${CPPFLAGS} ${CXXFLAGS}
#       Overall rule
STDCXX_USAGE_PREREQUSITES :=
STDCXX_USAGE_PREREQUSITES += gtest_main.a
STDCXX_USAGE_PREREQUSITES += ${STDCXX_USAGE_OBJS}
STDCXX_USAGE_PREREQUSITES += ${STDCXX_USAGE_HEADERS}
STDCXX_USAGE_PREREQUSITES += ${COMMON_HEADERS}
stdcxxusage.exe : ${STDCXX_USAGE_PREREQUSITES}
	${CXX} -o $@ $^ ${LDFLAGS}

#  algorithms.exe
#     Direcotries of source files
ALGORITHMS_DIR :=
ALGORITHMS_DIR += ${ROOT_DIR}/Algorithms
#     Source files
ALGORITHMS_SRCS :=
ALGORITHMS_SRCS += $(shell ls ${ALGORITHMS_DIR}/*.cxx)
#ALGORITHMS_SRCS += $(shell ls ${ALGORITHMS_DIR}/*.cpp)
#ALGORITHMS_SRCS += $(shell ls ${ALGORITHMS_DIR}/*.cc)
ifeq (${INFO_ENABLED}, 1)
$(info "Source files of algorithms.exe: ${ALGORITHMS_SRCS}")
endif
#     Header files
ALGORITHMS_HEADERS :=
ALGORITHMS_HEADERS += $(shell ls ${ALGORITHMS_DIR}/*.h)
#ALGORITHMS_HEADERS += $(shell ls ${ALGORITHMS_DIR}/*.hpp)
ifeq (${INFO_ENABLED}, 1)
$(info "Header files of algorithms.exe: ${ALGORITHMS_HEADERS}")
endif
#     Object files
ALGORITHMS_OBJS :=
ALGORITHMS_OBJS += $(patsubst %.cxx,%.o,${ALGORITHMS_SRCS})
#ALGORITHMS_OBJS += $(patsubst %.cpp,%.o,${ALGORITHMS_SRCS})
#ALGORITHMS_OBJS += $(patsubst %.cc,%.o,${ALGORITHMS_SRCS})
ifeq (${INFO_ENABLED}, 1)
$(info "Object files of algorithms: ${ALGORITHMS_OBJS}")
endif
#     Rules
#       Pattern rules(Need better rule for .cpp/.cc)
${ALGORITHMS_DIR}/%.o : ${ALGORITHMS_DIR}/%.cxx
	${CXX} -o $@ -c $< ${CPPFLAGS} ${CXXFLAGS}
#       Overall rule
ALGORITHMS_PREREQUSITES :=
ALGORITHMS_PREREQUSITES += ${ALGORITHMS_OBJS}
ALGORITHMS_PREREQUSITES += ${ALGORITHMS_HEADERS}
ALGORITHMS_PREREQUSITES += ${COMMON_HEADERS}
algorithms.exe : ${ALGORITHMS_PREREQUSITES}
	${CXX} -o $@ $^ ${LDFLAGS}


#  lsp.exe
#     Direcotries of source files
LSP_DIR :=
LSP_DIR += ${ROOT_DIR}/LinuxSystemProgramming
#     Source files
LSP_SRCS :=
LSP_SRCS += $(shell ls ${LSP_DIR}/*.cxx)
#LSP_SRCS += $(shell ls ${LSP_DIR}/*.cpp)
#LSP_SRCS += $(shell ls ${LSP_DIR}/*.cc)
ifeq (${INFO_ENABLED}, 1)
$(info "Source files of algorithms.exe: ${LSP_SRCS}")
endif
#     Header files
LSP_HEADERS :=
#LSP_HEADERS += $(shell ls ${LSP_DIR}/*.h)
#LSP_HEADERS += $(shell ls ${LSP_DIR}/*.hpp)
ifeq (${INFO_ENABLED}, 1)
$(info "Header files of algorithms.exe: ${LSP_HEADERS}")
endif
#     Object files
LSP_OBJS :=
LSP_OBJS += $(patsubst %.cxx,%.o,${LSP_SRCS})
#LSP_OBJS += $(patsubst %.cpp,%.o,${LSP_SRCS})
#LSP_OBJS += $(patsubst %.cc,%.o,${LSP_SRCS})
ifeq (${INFO_ENABLED}, 1)
$(info "Object files of algorithms: ${LSP_OBJS}")
endif
#     Rules
#       Pattern rules(Need better rule for .cpp/.cc)
${LSP_DIR}/%.o : ${LSP_DIR}/%.cxx
	${CXX} -o $@ -c $< ${CPPFLAGS} ${CXXFLAGS}
#       Overall rule
LSP_PREREQUSITES :=
LSP_PREREQUSITES += ${LSP_OBJS}
LSP_PREREQUSITES += ${LSP_HEADERS}
LSP_PREREQUSITES += ${COMMON_HEADERS}
lsp.exe : ${LSP_PREREQUSITES} gtest_main.a
	${CXX} -o $@ $^ ${LDFLAGS}


# Rules of house-keeping target
#     Add directories of source files of each target here
clean :
	rm -f ${TARGETS} gtest.a gtest_main.a *.o
	rm -f ${CXX_USAGE_DIR}/*.o
	rm -f ${STDCXX_USAGE_DIR}/*.o
	rm -f ${ALGORITHMS_DIR}/*.o
	rm -f ${LSP_DIR}/*.o

